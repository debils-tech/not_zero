name: App release

on:
  push:
    branches:
      - "release/**"

jobs:
  check:
    name: Check application
    runs-on: ubuntu-latest
    steps:
      # Init
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Read Flutter version
        id: fvm
        run: echo "flutter_version=$(jq -r '.flutter' .fvmrc)" >> $GITHUB_OUTPUT
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.fvm.outputs.flutter_version }}
          channel: stable
          cache: true
      - uses: bluefireteam/melos-action@v3
      - uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-pubcache
          path: |
            ~/.pub-cache/git
            ~/.pub-cache/hosted
            ~/.pub-cache/hosted-hashes
      - name: Check flutter installation
        run: flutter --version
      # Preparation
      - name: Get dependencies
        run: melos bootstrap
      # Checks
      - name: Ensure that code is formatted correctly
        run: melos format --set-exit-if-changed --output none $(git ls-files | grep --colour=never -e ".*\.dart")
      - name: Analyze code to find critical problems
        run: melos exec flutter analyze --no-fatal-infos
      - name: Run tests
        run: melos run --no-select test

  version_update:
    name: Update pubspec version
    needs: check
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.update_version.outputs.app_version }}
      app_build_number: ${{ steps.update_version.outputs.app_build_number }}
      commit_hash: ${{ steps.get_hash.outputs.commit_hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Update Version
        id: update_version
        run: tools/update-version.sh $(echo $GITHUB_REF | sed 's|refs/heads/release/||') >> $GITHUB_OUTPUT
      - name: Validate release notes
        run: tools/validate-release-notes.sh ${{ steps.update_version.outputs.app_version }}
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add apps/not_zero_app/pubspec.yaml
          git commit -m "Bump version to ${{ steps.update_version.outputs.app_version }}+${{ steps.update_version.outputs.app_build_number }} [skip ci]"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin $(echo $GITHUB_REF | sed 's|refs/heads/||')
      - name: Get commit hash
        id: get_hash
        run: echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  build_android:
    name: Build android
    needs: version_update
    runs-on: ubuntu-latest
    steps:
      # Init
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.version_update.outputs.commit_hash }}
      - uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-pubcache
          path: |
            ~/.pub-cache/git
            ~/.pub-cache/hosted
            ~/.pub-cache/hosted-hashes
      - name: Read Flutter version
        id: fvm
        run: echo "flutter_version=$(jq -r '.flutter' .fvmrc)" >> $GITHUB_OUTPUT
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.fvm.outputs.flutter_version }}
          channel: stable
          cache: true
      - uses: bluefireteam/melos-action@v3
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: "17"
      - uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-androidsdk-flutter-${{ steps.fvm.outputs.flutter_version }}
          path: | # Cache NDK and CMake so builds are quicker
            /usr/local/lib/android/sdk/ndk/
            /usr/local/lib/android/sdk/cmake/
      - name: Check flutter and Java installation installation
        run: |
          flutter --version
          java --version
      # Preparation
      - name: Get dependencies
        run: melos bootstrap
      - name: Decode and save android keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > $HOME/keystore.jks
      - name: Save key.properties
        working-directory: apps/not_zero_app
        run: |
          touch android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=$HOME/keystore.jks" >> android/key.properties
      # Build and upload
      - name: Build APK
        run: |
          make build-android
      - name: Upload FOSS APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-apk-foss
          path: apps/not_zero_app/build/releases/android

  release:
    name: Release to GitHub actions
    needs:
      - build_android
      - version_update
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.version_update.outputs.commit_hash }}
      - name: Download APKs Directory
        uses: actions/download-artifact@v4
        with:
          name: artifacts-apk-foss
          path: artifacts/
      - name: Check files
        run: pwd && ls -l artifacts
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.version_update.outputs.app_version }}
          name: v${{ needs.version_update.outputs.app_version }}
          bodyFile: release_notes/${{ needs.version_update.outputs.app_version }}/github/RELEASE_NOTES.md
          artifacts: "artifacts/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
