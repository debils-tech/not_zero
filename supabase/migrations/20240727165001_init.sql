create table "public"."configs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp without time zone not null default now(),
    "updated_at" timestamp without time zone not null default now(),
    "enabled" boolean not null default true,
    "data" json not null default '{}'::json,
    "key" text not null default ''::text
);


alter table "public"."configs" enable row level security;

create table "public"."daily_plans" (
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text not null default ''''''::text,
    "completed_at" timestamp with time zone,
    "for_date" date not null
);


alter table "public"."daily_plans" enable row level security;

CREATE UNIQUE INDEX configs_key_key ON public.configs USING btree (key);

CREATE UNIQUE INDEX configs_pkey ON public.configs USING btree (id);

CREATE UNIQUE INDEX daily_plans_pkey ON public.daily_plans USING btree (id);

alter table "public"."configs" add constraint "configs_pkey" PRIMARY KEY using index "configs_pkey";

alter table "public"."daily_plans" add constraint "daily_plans_pkey" PRIMARY KEY using index "daily_plans_pkey";

alter table "public"."configs" add constraint "configs_key_key" UNIQUE using index "configs_key_key";

alter table "public"."daily_plans" add constraint "daily_plans_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."daily_plans" validate constraint "daily_plans_user_id_fkey";

grant delete on table "public"."configs" to "anon";

grant insert on table "public"."configs" to "anon";

grant references on table "public"."configs" to "anon";

grant select on table "public"."configs" to "anon";

grant trigger on table "public"."configs" to "anon";

grant truncate on table "public"."configs" to "anon";

grant update on table "public"."configs" to "anon";

grant delete on table "public"."configs" to "authenticated";

grant insert on table "public"."configs" to "authenticated";

grant references on table "public"."configs" to "authenticated";

grant select on table "public"."configs" to "authenticated";

grant trigger on table "public"."configs" to "authenticated";

grant truncate on table "public"."configs" to "authenticated";

grant update on table "public"."configs" to "authenticated";

grant delete on table "public"."configs" to "service_role";

grant insert on table "public"."configs" to "service_role";

grant references on table "public"."configs" to "service_role";

grant select on table "public"."configs" to "service_role";

grant trigger on table "public"."configs" to "service_role";

grant truncate on table "public"."configs" to "service_role";

grant update on table "public"."configs" to "service_role";

grant delete on table "public"."daily_plans" to "anon";

grant insert on table "public"."daily_plans" to "anon";

grant references on table "public"."daily_plans" to "anon";

grant select on table "public"."daily_plans" to "anon";

grant trigger on table "public"."daily_plans" to "anon";

grant truncate on table "public"."daily_plans" to "anon";

grant update on table "public"."daily_plans" to "anon";

grant delete on table "public"."daily_plans" to "authenticated";

grant insert on table "public"."daily_plans" to "authenticated";

grant references on table "public"."daily_plans" to "authenticated";

grant select on table "public"."daily_plans" to "authenticated";

grant trigger on table "public"."daily_plans" to "authenticated";

grant truncate on table "public"."daily_plans" to "authenticated";

grant update on table "public"."daily_plans" to "authenticated";

grant delete on table "public"."daily_plans" to "service_role";

grant insert on table "public"."daily_plans" to "service_role";

grant references on table "public"."daily_plans" to "service_role";

grant select on table "public"."daily_plans" to "service_role";

grant trigger on table "public"."daily_plans" to "service_role";

grant truncate on table "public"."daily_plans" to "service_role";

grant update on table "public"."daily_plans" to "service_role";

create policy "Enable read access for all users"
on "public"."configs"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."daily_plans"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."daily_plans"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for users based on user_id"
on "public"."daily_plans"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on user_id"
on "public"."daily_plans"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id));


